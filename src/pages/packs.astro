---
import Layout from "../layouts/Layout.astro";
---

<Layout title="Packs">
    <main>
        <div class="card">
            <h2>Verificador de packs</h2>
            <input type="file" id="fileInput" accept=".csv" />

            <div id="myModal" class="modal">
                <div class="modal-content">
                    <span class="close">&times;</span>
                    <div id="modalContent"></div>
                </div>
            </div>
        </div>
        <div class="card-2 hidden">
            <div id="results"></div>
        </div>
    </main>
    <script>
        import Papa from "papaparse";

        document.addEventListener("astro:page-load", function () {
            // Aseguramos que el elemento fileInput existe y es de tipo HTMLInputElement
            const fileInput = document.getElementById(
                "fileInput",
            ) as HTMLInputElement | null;

            if (fileInput) {
                fileInput.addEventListener("change", handleFileSelect, false);
            }

            function handleFileSelect(event: Event): void {
                const target = event.target as HTMLInputElement;
                const file = target.files ? target.files[0] : null;

                if (file) {
                    Papa.parse(file, {
                        header: true,
                        complete: function (results) {
                            processCSVData(results.data);
                        },
                    });
                }
            }

            interface CSVRow {
                Title?: string;
                "Option1 Value"?: string;
                "Option2 Value"?: string;
                Available?: string;
            }

            interface PackAvailability {
                packName: string;
                packSize: string;
                packColors: string;
                available: boolean;
                unavailableColors: string;
            }

            function processCSVData(data: CSVRow[]): void {
                const packs = data.filter(
                    (item) => item.Title && item.Title.includes("Pack"),
                );
                const products = data.filter(
                    (item) => item.Title && !item.Title.includes("Pack"),
                );

                const packAvailability: PackAvailability[] = packs.map(
                    (pack) => {
                        const packName = pack.Title!;
                        const packSize = pack["Option1 Value"]!;
                        const packColors = pack["Option2 Value"]!.split(" - ");

                        let available = true;
                        let unavailableColors: string[] = [];

                        for (const color of packColors) {
                            const productAvailable = products.some(
                                (product) =>
                                    product["Option1 Value"] === packSize &&
                                    product[
                                        "Option2 Value"
                                    ]!.toLowerCase().trim() ===
                                        color.toLowerCase().trim() &&
                                    Number(product.Available) > 1,
                            );

                            if (!productAvailable) {
                                available = false;
                                unavailableColors.push(color);
                            }
                        }

                        return {
                            packName,
                            packSize,
                            packColors: packColors.join(", "),
                            available,
                            unavailableColors: unavailableColors.join(", "),
                        };
                    },
                );

                packAvailability.sort((a, b) => {
                    if (a.packName < b.packName) return -1;
                    if (a.packName > b.packName) return 1;
                    if (a.packSize < b.packSize) return -1;
                    if (a.packSize > b.packSize) return 1;
                    return 0;
                });

                displayResults(packAvailability);
            }

            function displayResults(
                packAvailability: PackAvailability[],
            ): void {
                const resultsDiv = document.getElementById("results");
                if (!resultsDiv) return;

                let results =
                    "<table><thead><tr><th>Pack</th><th>Talla</th><th>Colores</th><th>Disponibilidad</th></tr></thead><tbody>";

                packAvailability.forEach((pack, index) => {
                    results += `<tr class="${pack.available ? "available" : "unavailable"}" data-index="${index}">
                        <td>${pack.packName}</td>
                        <td>${pack.packSize}</td>
                        <td>${pack.packColors}</td>
                        <td>${pack.available ? "Disponible" : `<strong>No Disponibles:</strong> ${pack.unavailableColors}`}</td>
                    </tr>`;
                });

                const card2 = document.querySelector(".card-2");
                if (card2) {
                    card2.classList.remove("hidden");
                }

                results += "</tbody></table>";
                resultsDiv.innerHTML = results;

                document.querySelectorAll("tr[data-index]").forEach((row) => {
                    row.addEventListener("click", function () {
                        const packName = this.querySelector("td")!.textContent!;
                        showModal(packName, packAvailability);
                    });
                });
            }

            function showModal(
                packName: string,
                packAvailability: PackAvailability[],
            ): void {
                const modal = document.getElementById("myModal");
                const modalContent = document.getElementById("modalContent");

                if (!modal || !modalContent) return;

                const filteredPacks = packAvailability.filter(
                    (pack) => pack.packName === packName,
                );
                let content = `<table><thead><tr><th>Pack</th><th>Talla</th><th>Colores</th><th>Disponibilidad</th></tr></thead><tbody>`;

                filteredPacks.forEach((pack) => {
                    content += `<tr class="${pack.available ? "available" : "unavailable"}">
                        <td>${pack.packName}</td>
                        <td>${pack.packSize}</td>
                        <td>${pack.packColors}</td>
                        <td>${pack.available ? "Disponible" : `<strong>No Disponibles:</strong> ${pack.unavailableColors}`}</td>
                    </tr>`;
                });

                content += `</tbody></table>`;
                modalContent.innerHTML = content;
                modal.style.display = "block";

                document
                    .querySelector(".close")
                    ?.addEventListener("click", () => {
                        modal.style.display = "none";
                    });

                window.addEventListener("click", function (event) {
                    if (event.target === modal) {
                        modal.style.display = "none";
                    }
                });
            }
        });
    </script>
</Layout>
<style>
    main {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        position: absolute;
        gap: 1rem;
        width: 90%;
        left: calc(50% - 45%);
        top: 6rem;
    }
    .card {
        border: 1px solid var(--accent-color-3);
        width: 75%;
        margin: 0 auto;
    }
    .card-2 {
        border: 1px solid var(--accent-color-3);
        width: 75%;
        margin: 0 auto;
        height: fit-content;
    }
    .modal {
        display: none;
        position: fixed;
        z-index: 1;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        overflow: auto;
        background-color: rgb(0, 0, 0);
        background-color: rgba(0, 0, 0, 0.4);
        padding-top: 60px;
    }

    .modal-content {
        background-color: var(--input-color);
        margin: 5% auto;
        padding: 20px;
        border: 1px solid #888;
        width: 80%;
    }

    .close {
        color: #aaa;
        float: right;
        font-size: 28px;
        font-weight: bold;
    }

    .close:hover,
    .close:focus {
        color: black;
        text-decoration: none;
        cursor: pointer;
    }

    #result {
        margin-top: 1.5rem;
    }

    #fileInput {
        max-width: -webkit-fill-available;
        width: 100% !important;
    }

    #overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        display: none;
        justify-content: center;
        align-items: center;
    }

    #popup {
        background-color: var(--secondary);
        padding: 20px;
        border-radius: 5px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.25);
        max-height: 80%;
        overflow-y: auto;
        max-width: 80%;
        width: 100%;
        border-radius: 30px;
        scrollbar-width: none;
    }

    #popup table {
        width: 100%;
        border-collapse: collapse;
    }

    #popup th,
    #popup td {
        border: 1px solid #ccc;
        padding: 8px;
        text-align: left;
    }

    #close-button {
        color: var(--tertiary);
        font-size: 1.2rem;
        background-color: transparent;
        font-weight: bolder;
        border: none;
        cursor: pointer;
        float: right;
        margin-bottom: 1rem;
        margin-right: 0.5rem;
    }

    #close-button:hover {
        color: #d32f2f;
    }
</style>
